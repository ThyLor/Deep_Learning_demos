{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Deep Learning for NLP - Project"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import io\n",
    "import os\n",
    "import scipy\n",
    "import numpy as np\n",
    "import re\n",
    "from scipy import linalg\n",
    "import random as rn\n",
    "import string \n",
    "from nltk.tokenize import word_tokenize\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "PATH_TO_DATA = os.getcwd()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1) Monolingual (English) word embeddings "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Word2vec():\n",
    "    def __init__(self, fname, nmax=100000):\n",
    "        self.load_wordvec(fname, nmax)\n",
    "        self.word2id = dict.fromkeys(self.word2vec.keys())\n",
    "        self.id2word = {v: k for k, v in self.word2id.items()}\n",
    "        self.embeddings = np.array(list(self.word2vec.values()))\n",
    "            \n",
    "    def load_wordvec(self, fname, nmax):\n",
    "        self.word2vec = {}        \n",
    "        with io.open(fname, encoding='utf-8') as f:\n",
    "            next(f)\n",
    "            for i, line in enumerate(f):\n",
    "                word, vec = line.split(' ', 1)\n",
    "                self.word2vec[word] = np.fromstring(vec, sep=' ')\n",
    "                if i == (nmax - 1):\n",
    "                    break\n",
    "        # New variable \n",
    "        self.list_words = list(self.word2vec.keys())\n",
    "        \n",
    "    def most_similar(self, w, K=5):\n",
    "        # K most similar words: self.score  -  np.argsort \n",
    "        \n",
    "        words_and_score = []\n",
    "        pivot = self.word2vec[w]\n",
    "        \n",
    "        for i in range(len(self.embeddings)):\n",
    "            tmp_val = self.embeddings[i]\n",
    "            words_and_score.append([self.list_words[i], Word2vec.score_1(pivot,tmp_val)])\n",
    "            \n",
    "        words_and_score.sort(key = lambda x : x[1], reverse = True)\n",
    "        \n",
    "        top_K_words = []\n",
    "        \n",
    "        for j in range(K):\n",
    "            top_K_words.append(words_and_score[j+1][0])\n",
    "        \n",
    "        return top_K_words\n",
    "    \n",
    "    \n",
    "    def KNN(self,pivot, K=5):\n",
    "        # K most similar words: self.score  -  np.argsort \n",
    "        words_and_score = []\n",
    "        \n",
    "        for i in range(len(self.embeddings)):\n",
    "            tmp_val = self.embeddings[i]\n",
    "            words_and_score.append([self.list_words[i], Word2vec.score_1(pivot, tmp_val)])\n",
    "            \n",
    "        words_and_score.sort(key = lambda x : x[1], reverse = True)\n",
    "        \n",
    "        top_K_words = []\n",
    "        \n",
    "        for j in range(K):\n",
    "            top_K_words.append(words_and_score[j+1][0])\n",
    "            \n",
    "        return top_K_words\n",
    "                        \n",
    "    def score(self, w1, w2):\n",
    "        # cosine similarity: np.dot  -  np.linalg.norm\n",
    "        \n",
    "        w1_vec = self.word2vec[w1]\n",
    "        w2_vec = self.word2vec[w2]\n",
    "        \n",
    "        return np.dot(w1_vec,w2_vec)/(np.linalg.norm(w1_vec) * np.linalg.norm(w2_vec))\n",
    "    \n",
    "    def score_1(w1, w2):\n",
    "        # cosine similarity: np.dot  -  np.linalg.norm\n",
    "        \n",
    "        return np.dot(w1,w2)/(np.linalg.norm(w1) * np.linalg.norm(w2))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cat dog 0.671683666279249\n",
      "dog pet 0.6842064029669219\n",
      "dogs cats 0.7074389328052404\n",
      "paris france 0.7775108541288563\n",
      "germany berlin 0.7420295235998394\n",
      "['cats', 'kitty', 'kitten', 'feline', 'kitties']\n",
      "['dogs', 'puppy', 'Dog', 'doggie', 'canine']\n",
      "['dog', 'pooches', 'Dogs', 'doggies', 'canines']\n",
      "['france', 'Paris', 'london', 'berlin', 'tokyo']\n",
      "['austria', 'europe', 'german', 'berlin', 'poland']\n"
     ]
    }
   ],
   "source": [
    "w2v = Word2vec(os.path.join(PATH_TO_DATA, 'crawl-300d-200k.vec'), nmax=100000)\n",
    "\n",
    "# You will be evaluated on the output of the following:\n",
    "for w1, w2 in zip(('cat', 'dog', 'dogs', 'paris', 'germany'), ('dog', 'pet', 'cats', 'france', 'berlin')):\n",
    "    print(w1, w2, w2v.score(w1, w2))\n",
    "for w1 in ['cat', 'dog', 'dogs', 'paris', 'germany']:\n",
    "    print(w2v.most_similar(w1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "class BoV():\n",
    "    def __init__(self, w2v):\n",
    "        self.w2v = w2v\n",
    "    \n",
    "    def encode(self, sentences, idf=False):\n",
    "        # takes a list of sentences, outputs a numpy array of sentence embeddings\n",
    "        # see TP1 for help      \n",
    "                \n",
    "        sentence_emb = []\n",
    "\n",
    "        if idf is False:\n",
    "            for sentence in sentences:\n",
    "                admitted_words = []\n",
    "                for w in sentence:\n",
    "                    try:\n",
    "                        admitted_words.append(self.w2v.word2vec[w])\n",
    "                    except:\n",
    "                        pass\n",
    "                if(len(admitted_words) == 0):\n",
    "                    sentence_emb.append([0]*300)\n",
    "                else:\n",
    "                    sentence_emb.append(np.sum([wv for wv in admitted_words], axis = 0)/len(admitted_words))\n",
    "                \n",
    "        else:\n",
    "            for sentence in sentences:\n",
    "                admitted_words = []\n",
    "                for w in sentence:\n",
    "                    try:\n",
    "                        admitted_words.append( (w, self.w2v.word2vec[w]) )\n",
    "                    except:\n",
    "                        pass\n",
    "                if(len(admitted_words) == 0):\n",
    "                    sentence_emb.append([0]*300)\n",
    "                else:\n",
    "                    normalization = np.sum([idf[w[0]] for w in admitted_words])\n",
    "                    sentence_emb.append(np.sum([ [float(idf[w[0]])*component for component in w[1]] for w in admitted_words],axis = 0)/normalization)\n",
    "                \n",
    "        return np.vstack(sentence_emb)\n",
    "\n",
    "    def most_similar(self, s, sentences, idf=False, K=5):\n",
    "        # get most similar sentences and **print** them\n",
    "        keys = self.encode(sentences, idf)\n",
    "        s_encode = self.encode([s], idf)\n",
    "        \n",
    "        # K most similar words: self.score  -  np.argsort \n",
    "        most_similar_words = []\n",
    "        \n",
    "        for i in range(len(keys)):\n",
    "            tmp_val = keys[i]\n",
    "            most_similar_words.append((sentences[i], np.dot(s_encode,tmp_val)/(np.linalg.norm(s_encode) * np.linalg.norm(tmp_val))))\n",
    "        \n",
    "        most_similar_words.sort(key = lambda x : x[1], reverse = True)\n",
    "            \n",
    "        #How to get the sentence for a given vector\n",
    "        for i in range(K):\n",
    "            print(most_similar_words[i+1][0])\n",
    "\n",
    "        return most_similar_words[1:K+1][0]\n",
    "\n",
    "    def score(self, s1, s2, idf=False):\n",
    "        # cosine similarity: use   np.dot  and  np.linalg.norm\n",
    "        v1 = self.encode([s1],idf)\n",
    "        v2 = self.encode([s2],idf)\n",
    "        \n",
    "        return np.dot(v1,v2.T)/(np.linalg.norm(v1) * np.linalg.norm(v2))\n",
    "    \n",
    "    def build_idf(self, sentences):\n",
    "        # build the idf dictionary: associate each word to its idf value\n",
    "        \n",
    "        # Decleare the idf dictionary\n",
    "        idf = {}\n",
    "        # Normalized dictionary\n",
    "        n_idf = {}\n",
    "        \n",
    "        for sent in sentences:\n",
    "             for w in set(sent): \n",
    "                idf[w] = idf.get(w, 0) + 1 \n",
    "                \n",
    "        for word in list(idf.keys()):\n",
    "            n_idf[word] = max(1, np.log10(len(sentences) / (idf[word])))\n",
    "            \n",
    "        return n_idf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['1', 'smiling', 'african', 'american', 'boy']\n",
      "['an', 'african', 'american', 'man', 'smiling']\n",
      "['a', 'little', 'african', 'american', 'boy', 'and', 'girl', 'looking', 'up']\n",
      "['african', 'american', 'woman', 'bouncing', 'black', 'basketball']\n",
      "['an', 'afican', 'american', 'woman', 'standing', 'behind', 'two', 'small', 'african', 'american', 'children']\n",
      "['a', 'girl', 'in', 'black', 'hat', 'holding', 'an', 'african', 'american', 'baby']\n",
      "['an', 'african', 'american', 'man', 'smiling']\n",
      "['an', 'african', 'american', 'man', 'is', 'sitting']\n",
      "['a', 'little', 'african', 'american', 'boy', 'and', 'girl', 'looking', 'up']\n",
      "['an', 'afican', 'american', 'woman', 'standing', 'behind', 'two', 'small', 'african', 'american', 'children']\n",
      "['a', 'girl', 'in', 'black', 'hat', 'holding', 'an', 'african', 'american', 'baby']\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[0.45262547]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "w2v = Word2vec(os.path.join(PATH_TO_DATA, 'crawl-300d-200k.vec'), nmax=250000)\n",
    "s2v = BoV(w2v)\n",
    "\n",
    "# Load sentences in \"PATH_TO_DATA/sentences.txt\"\n",
    "sentences = []\n",
    "file_sentences = \"sentences.txt\"\n",
    "\n",
    "f = open(file_sentences,'r')\n",
    "data = f.read().split('\\n')\n",
    "exclude = set(string.punctuation)\n",
    "data_cleaned = [(''.join(ch for ch in line if ch not in exclude)) for line in data]\n",
    "sentences = [word_tokenize(line) for line in data_cleaned if (len(line)>0)]\n",
    "f.close()\n",
    "    \n",
    "# Build idf scores for each word\n",
    "idf = {} if True else s2v.build_idf(sentences)\n",
    "\n",
    "# You will be evaluated on the output of the following:\n",
    "print('' if not sentences else sentences[10])\n",
    "\n",
    "s2v.most_similar('' if not sentences else sentences[10], sentences)  # BoV-mean\n",
    "s2v.score('' if not sentences else sentences[7], '' if not sentences else sentences[13])\n",
    "\n",
    "idf = s2v.build_idf(sentences)\n",
    "s2v.most_similar('' if not sentences else sentences[10], sentences, idf)  # BoV-idf\n",
    "s2v.score('' if not sentences else sentences[7], '' if not sentences else sentences[13], idf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2) Multilingual (English-French) word embeddings"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's consider a bilingual dictionary of size V_a (e.g French-English).\n",
    "\n",
    "Let's define **X** and **Y** the **French** and **English** matrices.\n",
    "\n",
    "They contain the embeddings associated to the words in the bilingual dictionary.\n",
    "\n",
    "We want to find a **mapping W** that will project the source word space (e.g French) to the target word space (e.g English).\n",
    "\n",
    "Procrustes : **W\\* = argmin || W.X - Y ||  s.t  W^T.W = Id**\n",
    "has a closed form solution:\n",
    "**W = U.V^T  where  U.Sig.V^T = SVD(Y.X^T)**\n",
    "\n",
    "In what follows, you are asked to: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1 - Download and load 50k first vectors of\n",
    "#     https://s3-us-west-1.amazonaws.com/fasttext-vectors/wiki.en.vec\n",
    "#     https://s3-us-west-1.amazonaws.com/fasttext-vectors/wiki.fr.vec\n",
    "\n",
    "# TYPE CODE HERE\n",
    "\n",
    "# DOWNLOAD\n",
    "# LOAD\n",
    "n_words = 50000\n",
    "w2v_en = Word2vec('wiki.en.vec',n_words)\n",
    "w2v_fr = Word2vec('wiki.fr.vec',n_words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2 - Get words that appear in both vocabs (= identical character strings)\n",
    "#     Use it to create the matrix X and Y (of aligned embeddings for these words)\n",
    "words_en = set(w2v_en.list_words)\n",
    "words_fr = set(w2v_fr.list_words)\n",
    "words_common = words_en.intersection(words_fr)\n",
    "\n",
    "n_words_common = len(words_common)\n",
    "n_words_distinct = n_words - n_words_common\n",
    "\n",
    "lst_en_words_distinct = list(words_en.difference(words_common))\n",
    "lst_fr_words_distinct = list(words_fr.difference(words_common))\n",
    "lst_words_common = list(words_common)\n",
    "\n",
    "d = len(w2v_en.word2vec[lst_en_words_distinct[0]])\n",
    "\n",
    "X = np.zeros((d,n_words_common))\n",
    "Y = np.zeros((d,n_words_common))\n",
    "\n",
    "for i in range(n_words_common):\n",
    "    X[:,i] = w2v_fr.word2vec[lst_words_common[i]]\n",
    "    Y[:,i] = w2v_en.word2vec[lst_words_common[i]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 3 - Solve the Procrustes using the scipy package and: scipy.linalg.svd() and get the optimal W\n",
    "#     Now W*French_vector is in the same space as English_vector\n",
    "U, s, Vh = linalg.svd(Y.dot(X.T))\n",
    "W = U.dot(Vh)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "** Pick a french word and give me the top K translations **\n",
      "French word: fmi\n",
      "Top K english-related words are: \n",
      "-> macroeconomic\n",
      "-> monetary\n",
      "-> eurozone\n",
      "-> opec\n",
      "-> oecd\n",
      "French word: fermeture\n",
      "Top K english-related words are: \n",
      "-> reopened\n",
      "-> reopen\n",
      "-> closure\n",
      "-> closing\n",
      "-> closures\n",
      "French word: angulaire\n",
      "Top K english-related words are: \n",
      "-> perpendicular\n",
      "-> curvature\n",
      "-> amplitude\n",
      "-> dimensionless\n",
      "-> velocity\n",
      "French word: monnet\n",
      "Top K english-related words are: \n",
      "-> moreau\n",
      "-> leclerc\n",
      "-> mitterrand\n",
      "-> jean\n",
      "-> françois\n",
      "French word: lavedan\n",
      "Top K english-related words are: \n",
      "-> foix\n",
      "-> gascony\n",
      "-> aveyron\n",
      "-> navarre\n",
      "-> occitan\n",
      "French word: oricon\n",
      "Top K english-related words are: \n",
      "-> heatseekers\n",
      "-> chart\n",
      "-> billboard\n",
      "-> r&b/hip\n",
      "-> peaking\n",
      "French word: longueuil\n",
      "Top K english-related words are: \n",
      "-> quebec\n",
      "-> sherbrooke\n",
      "-> gatineau\n",
      "-> rivières\n",
      "-> montreal\n",
      "French word: agrégée\n",
      "Top K english-related words are: \n",
      "-> normale\n",
      "-> école\n",
      "-> sorbonne\n",
      "-> ecole\n",
      "-> doctorate\n",
      "French word: océanienne\n",
      "Top K english-related words are: \n",
      "-> austronesian\n",
      "-> polynesian\n",
      "-> oceania\n",
      "-> polynesia\n",
      "-> vanuatu\n",
      "French word: aiea\n",
      "Top K english-related words are: \n",
      "-> radiological\n",
      "-> multilateral\n",
      "-> reactors\n",
      "-> nuclear\n",
      "-> reactor\n",
      "** Pick a english word and give me the top K translations **\n",
      "English word: brooker\n",
      "Top K french-related words are: \n",
      "-> nicholls\n",
      "-> marsh\n",
      "-> cutler\n",
      "-> maloney\n",
      "-> davies\n",
      "English word: diagnosis\n",
      "Top K french-related words are: \n",
      "-> diagnostique\n",
      "-> diagnostics\n",
      "-> pathologies\n",
      "-> biopsie\n",
      "-> diagnostiqué\n",
      "English word: posner\n",
      "Top K french-related words are: \n",
      "-> lerner\n",
      "-> friedman\n",
      "-> goldstein\n",
      "-> oppenheimer\n",
      "-> cohen\n",
      "English word: emotion\n",
      "Top K french-related words are: \n",
      "-> émotionnelle\n",
      "-> émotion\n",
      "-> émotionnel\n",
      "-> imagination\n",
      "-> empathie\n",
      "English word: tiwari\n",
      "Top K french-related words are: \n",
      "-> sanjay\n",
      "-> singh\n",
      "-> kapoor\n",
      "-> chopra\n",
      "-> sharma\n",
      "English word: mandalay\n",
      "Top K french-related words are: \n",
      "-> phnom\n",
      "-> vientiane\n",
      "-> birmans\n",
      "-> thaïlandais\n",
      "-> thaï\n",
      "English word: prabhakar\n",
      "Top K french-related words are: \n",
      "-> sanjay\n",
      "-> shankar\n",
      "-> vijay\n",
      "-> kumar\n",
      "-> sharma\n",
      "English word: reconciling\n",
      "Top K french-related words are: \n",
      "-> réconciliation\n",
      "-> coexistence\n",
      "-> réconcilie\n",
      "-> conciliation\n",
      "-> contradictions\n",
      "English word: oriente\n",
      "Top K french-related words are: \n",
      "-> misiones\n",
      "-> universidad\n",
      "-> alianza\n",
      "-> centro\n",
      "-> oeste\n",
      "English word: derive\n",
      "Top K french-related words are: \n",
      "-> dérivent\n",
      "-> dériver\n",
      "-> dérivant\n",
      "-> proviendrait\n",
      "-> découle\n"
     ]
    }
   ],
   "source": [
    "# 4 - After alignment with W, give examples of English nearest neighbors of some French words (and vice versa)\n",
    "#     You will be evaluated on that part and the code above\n",
    "K = 5\n",
    "n_showed_words = 10\n",
    "\n",
    "print(\"** Pick a french word and give me the top K translations **\")\n",
    "# Pick a french word and give me the top K translations\n",
    "for j in range(n_showed_words):\n",
    "    my_index = np.random.randint(n_words)\n",
    "    my_word = w2v_fr.list_words[my_index]\n",
    "    print(\"French word: \"+my_word)\n",
    "    related_words = w2v_en.KNN(W.dot(w2v_fr.word2vec[my_word]))\n",
    "    print(\"Top K english-related words are: \")\n",
    "    for l in range(K):\n",
    "        print(\"-> \"+related_words[l])\n",
    "print(\"** Pick a english word and give me the top K translations **\")\n",
    "# Pick an english word and give me the top K translations\n",
    "for j in range(n_showed_words):\n",
    "    my_index = np.random.randint(n_words)\n",
    "    my_word = w2v_en.list_words[my_index]\n",
    "    print(\"English word: \"+my_word)\n",
    "    related_words = w2v_fr.KNN((W.T).dot(w2v_en.word2vec[my_word]))\n",
    "    print(\"Top K french-related words are: \")\n",
    "    for l in range(K):\n",
    "        print(\"-> \"+related_words[l])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you want to dive deeper on this subject: https://github.com/facebookresearch/MUSE"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3) Sentence classification with BoV and scikit-learn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1 - Load train/dev/test of Stanford Sentiment TreeBank (SST)\n",
    "#     (https://nlp.stanford.edu/~socherr/EMNLP2013_RNTN.pdf)\n",
    "def data_pp_1(fname,case):\n",
    "    f = open(fname,'r')\n",
    "    data = f.read().split('\\n')\n",
    "    exclude = set(string.punctuation)\n",
    "    data_cleaned = [ (''.join(ch for ch in line if ch not in exclude)) for line in data]\n",
    "    #If we have the labels\n",
    "    if(case):\n",
    "        sent = [word_tokenize(line[1:]) for line in data_cleaned if len(line) > 0]\n",
    "        labels = [int(line[0]) for line in data_cleaned if len(line) > 0] \n",
    "        f.close()\n",
    "        return sent,labels\n",
    "    else:\n",
    "        sent = [word_tokenize(line) for line in data_cleaned]\n",
    "        f.close()\n",
    "        return sent\n",
    "    \n",
    "file_name_train = \"/Users/notebooks_deepl/nlp_project/data/SST/stsa.fine.train.csv\"\n",
    "file_name_test = \"/Users/notebooks_deepl/nlp_project/data/SST/stsa.fine.test.X.csv\"\n",
    "file_name_dev = \"/Users/notebooks_deepl/nlp_project/data/SST/stsa.fine.dev.csv\"\n",
    "\n",
    "sent_train, labels_train = data_pp_1(file_name_train,True)\n",
    "sent_dev, labels_dev = data_pp_1(file_name_dev,True)\n",
    "sent_test = data_pp_1(file_name_test,False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2 - Encode sentences with the BoV model above\n",
    "\n",
    "w2v = Word2vec(os.path.join(PATH_TO_DATA, 'crawl-300d-200k.vec'), nmax=150000)\n",
    "s2v = BoV(w2v)\n",
    "\n",
    "sent_emb_train = s2v.encode(sent_train, s2v.build_idf(sent_train))\n",
    "sent_emb_dev = s2v.encode(sent_dev, s2v.build_idf(sent_dev))\n",
    "sent_emb_test = s2v.encode(sent_test, s2v.build_idf(sent_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--> Train\n",
      "The f1_score is: 0.4709425796983484\n",
      "The accuracy is: 0.49929775280898875\n",
      "--> Test\n",
      "The f1_score is: 0.3674148302479298\n",
      "The accuracy is: 0.3996366939146231\n",
      "With a PCA\n",
      "--> Train\n",
      "The f1_score is: 0.4160345162745509\n",
      "The accuracy is: 0.4610252808988764\n",
      "--> Test\n",
      "The f1_score is: 0.35571935591550596\n",
      "The accuracy is: 0.40236148955495005\n"
     ]
    }
   ],
   "source": [
    "# 3 - Learn Logistic Regression on top of sentence embeddings using scikit-learn\n",
    "#     (consider tuning the L2 regularization on the dev set)\n",
    "\n",
    "feat_name = [ \"f_\"+str(i) for i in range(300)]\n",
    "\n",
    "df_train = pd.DataFrame(sent_emb_train, columns = feat_name)\n",
    "df_train[\"class\"] = labels_train\n",
    "df_dev = pd.DataFrame(sent_emb_dev, columns = feat_name)\n",
    "df_dev[\"class\"] = labels_dev\n",
    "df_test = pd.DataFrame(sent_emb_test, columns = feat_name)\n",
    "\n",
    "# Building up the model\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score, f1_score\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.decomposition import PCA\n",
    "\n",
    "X_train, Y_train = df_train[feat_name].values, df_train['class'].values\n",
    "\n",
    "clf_LR = LogisticRegression(C = 10, max_iter=10000,solver='lbfgs',multi_class='multinomial', penalty ='l2')\n",
    "\n",
    "clf_LR.fit(X_train, Y_train)\n",
    "\n",
    "print(\"--> Train\")\n",
    "print(\"The f1_score is: \"+str(f1_score(Y_train, clf_LR.predict(X_train), average='macro'))) \n",
    "print(\"The accuracy is: \"+str((accuracy_score(Y_train, clf_LR.predict(X_train))))) \n",
    "\n",
    "X_dev, Y_dev = df_dev[feat_name].values, df_dev['class'].values\n",
    "\n",
    "print(\"--> Test\")\n",
    "print(\"The f1_score is: \"+str(f1_score(Y_dev, clf_LR.predict(X_dev), average='macro'))) \n",
    "print(\"The accuracy is: \"+str((accuracy_score(Y_dev, clf_LR.predict(X_dev)))))\n",
    "\n",
    "\n",
    "print(\"With a PCA\")\n",
    "\n",
    "clf_LR_PCA = LogisticRegression(C = 10, max_iter=10000,solver='lbfgs',multi_class='multinomial', penalty ='l2')\n",
    "\n",
    "pca = PCA(n_components = 120)\n",
    "pca.fit(X_train)\n",
    "X_train_PCA = pca.transform(X_train)\n",
    "\n",
    "\n",
    "clf_LR_PCA.fit(X_train_PCA, Y_train)\n",
    "\n",
    "print(\"--> Train\")\n",
    "print(\"The f1_score is: \"+str(f1_score(Y_train, clf_LR_PCA.predict(X_train_PCA), average='macro'))) \n",
    "print(\"The accuracy is: \"+str((accuracy_score(Y_train, clf_LR_PCA.predict(X_train_PCA))))) \n",
    "\n",
    "X_dev, Y_dev = df_dev[feat_name].values, df_dev['class'].values\n",
    "\n",
    "X_dev_PCA = pca.transform(X_dev)\n",
    "\n",
    "print(\"--> Test\")\n",
    "print(\"The f1_score is: \"+str(f1_score(Y_dev, clf_LR_PCA.predict(X_dev_PCA), average='macro'))) \n",
    "print(\"The accuracy is: \"+str((accuracy_score(Y_dev, clf_LR_PCA.predict(X_dev_PCA)))))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[4 1 1 ... 0 1 3]\n"
     ]
    }
   ],
   "source": [
    "# 4 - Produce 2210 predictions for the test set (in the same order). One line = one prediction (=0,1,2,3,4).\n",
    "#     Attach the output file \"logreg_bov_y_test_sst.txt\" to your deliverable.\n",
    "#     You will be evaluated on the results of the test set.\n",
    "\n",
    "X_test = df_train[feat_name].values\n",
    "pred_labels_LR = clf_LR.predict(X_test)\n",
    "print(pred_labels_LR)\n",
    "\n",
    "file_out_LR = open(\"logistic_regression_predictions.txt\",\"w+\")\n",
    "for i in range(len(pred_labels_LR)):\n",
    "    file_out_LR.write(str(pred_labels_LR[i])+\"\\n\")  \n",
    "    \n",
    "file_out_LR.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# BONUS!\n",
    "# 5 - Try to improve performance with another classifier\n",
    "#     Attach the output file \"XXX_bov_y_test_sst.txt\" to your deliverable (where XXX = the name of the classifier)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4) Sentence classification with LSTMs in Keras"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4.1 - Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/h5py/__init__.py:34: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.\n",
      "  from ._conv import register_converters as _register_converters\n",
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "import keras\n",
    "import tensorflow as tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1 - Load train/dev/test sets of SST\n",
    "PATH_TO_DATA = os.getcwd()+\"\\data\"\n",
    "\n",
    "def data_pp_2(fname):\n",
    "    f = open(fname,'r')\n",
    "    text = f.read()\n",
    "    data = text.split('\\n')\n",
    "    f.close()\n",
    "    return data\n",
    "    \n",
    "file_name_train = \"/Users/notebooks_deepl/nlp_project/data/SST/stsa.fine.train.csv\"\n",
    "file_name_test = \"/Users/notebooks_deepl/nlp_project/data/SST/stsa.fine.test.X.csv\"\n",
    "file_name_dev = \"/Users/notebooks_deepl/nlp_project/data/SST/stsa.fine.dev.csv\"\n",
    "\n",
    "text_train = data_pp_2(file_name_train)\n",
    "text_dev = data_pp_2(file_name_dev)\n",
    "text_test = data_pp_2(file_name_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2 - Transform text to integers using keras.preprocessing.text.one_hot function\n",
    "#     https://keras.io/preprocessing/text/\n",
    "n = 16000\n",
    "\n",
    "def text_to_2Dint(text,n):\n",
    "    in_pad = []\n",
    "    labels = []\n",
    "    for line in (line for line in text if len(line) > 1):\n",
    "        in_pad.append(keras.preprocessing.text.one_hot(line[1:], n = n*1.3,filters=string.punctuation, lower=True, split=' '))\n",
    "        labels.append(int(line[0]))\n",
    "    return in_pad,labels\n",
    "\n",
    "def text_to_2Dint_test(text,n):\n",
    "    in_pad = []\n",
    "    for line in (line for line in text if len(line) > 1):\n",
    "        in_pad.append(keras.preprocessing.text.one_hot(line, n = n*1.3,filters=string.punctuation, lower=True, split=' '))\n",
    "    return in_pad\n",
    "\n",
    "in_pad_train,labels_train = text_to_2Dint(text_train,n)\n",
    "in_pad_dev,labels_dev = text_to_2Dint(text_dev,n)\n",
    "in_pad_test = text_to_2Dint_test(text_test,n)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Padding input data**\n",
    "\n",
    "Models in Keras (and elsewhere) take batches of sentences of the same length as input. It is because Deep Learning framework have been designed to handle well Tensors, which are particularly suited for fast computation on the GPU.\n",
    "\n",
    "Since sentences have different sizes, we \"pad\" them. That is, we add dummy \"padding\" tokens so that they all have the same length.\n",
    "\n",
    "The input to a Keras model thus has this size : (batchsize, maxseqlen) where maxseqlen is the maximum length of a sentence in the batch."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 3 - Pad your sequences using keras.preprocessing.sequence.pad_sequences\n",
    "#     https://keras.io/preprocessing/sequence/\n",
    "\n",
    "X_train_PAD = keras.preprocessing.sequence.pad_sequences(in_pad_train, maxlen=None, dtype='int32', padding='pre', truncating='pre', value=0.0)\n",
    "X_dev_PAD = keras.preprocessing.sequence.pad_sequences(in_pad_dev, maxlen=None, dtype='int32', padding='pre', truncating='pre', value=0.0)\n",
    "X_test_PAD = keras.preprocessing.sequence.pad_sequences(in_pad_test, maxlen=None, dtype='int32', padding='pre', truncating='pre', value=0.0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4.2 - Design and train your model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:20: UserWarning: Update your `LSTM` call to the Keras 2 API: `LSTM(15, dropout=0.2, recurrent_dropout=0.2)`\n"
     ]
    }
   ],
   "source": [
    "# 4 - Design your encoder + classifier using keras.layers\n",
    "#     In Keras, Torch and other deep learning framework, we create a \"container\" which is the Sequential() module.\n",
    "#     Then we add components to this contained : the lookuptable, the LSTM, the classifier etc.\n",
    "#     All of these components are contained in the Sequential() and are trained together.\n",
    "\n",
    "\n",
    "# ADAPT CODE BELOW\n",
    "\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Embedding, LSTM, Dense, Activation\n",
    "from keras.utils import np_utils\n",
    "\n",
    "embed_dim  = 50  # word embedding dimension\n",
    "nhid       = 15  # number of hidden units in the LSTM\n",
    "vocab_size = int(n*1.3)  # size of the vocabulary\n",
    "n_classes  = 5\n",
    "\n",
    "model = Sequential()\n",
    "model.add(Embedding(vocab_size, embed_dim))\n",
    "model.add(LSTM(nhid, dropout_W=0.2, dropout_U=0.2))\n",
    "model.add(Dense(n_classes, activation='softmax'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "embedding_1 (Embedding)      (None, None, 50)          1040000   \n",
      "_________________________________________________________________\n",
      "lstm_1 (LSTM)                (None, 15)                3960      \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 5)                 80        \n",
      "=================================================================\n",
      "Total params: 1,044,040\n",
      "Trainable params: 1,044,040\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "# 5 - Define your loss/optimizer/metrics\n",
    "\n",
    "# MODIFY CODE BELOW\n",
    "\n",
    "loss_classif     =  'categorical_crossentropy' # find the right loss for multi-class classification\n",
    "optimizer        =  'RMSProp' # find the right optimizer #RMSProp\n",
    "metrics_classif  =  ['accuracy']\n",
    "\n",
    "# Observe how easy (but blackboxed) this is in Keras\n",
    "model.compile(loss=loss_classif,\n",
    "              optimizer=optimizer,\n",
    "              metrics=metrics_classif)\n",
    "print(model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 8544 samples, validate on 1101 samples\n",
      "Epoch 1/6\n",
      "8544/8544 [==============================] - 16s 2ms/step - loss: 1.5732 - acc: 0.2860 - val_loss: 1.5622 - val_acc: 0.2779\n",
      "Epoch 2/6\n",
      "8544/8544 [==============================] - 13s 2ms/step - loss: 1.5173 - acc: 0.3460 - val_loss: 1.5020 - val_acc: 0.3460\n",
      "Epoch 3/6\n",
      "8544/8544 [==============================] - 13s 1ms/step - loss: 1.3969 - acc: 0.3977 - val_loss: 1.4226 - val_acc: 0.3787\n",
      "Epoch 4/6\n",
      "8544/8544 [==============================] - 13s 2ms/step - loss: 1.2629 - acc: 0.4748 - val_loss: 1.3955 - val_acc: 0.3951\n",
      "Epoch 5/6\n",
      "8544/8544 [==============================] - 15s 2ms/step - loss: 1.1504 - acc: 0.5414 - val_loss: 1.3888 - val_acc: 0.3942\n",
      "Epoch 6/6\n",
      "8544/8544 [==============================] - 14s 2ms/step - loss: 1.0487 - acc: 0.5943 - val_loss: 1.4128 - val_acc: 0.3942\n"
     ]
    }
   ],
   "source": [
    "# 6 - Train your model and find the best hyperparameters for your dev set\n",
    "#     you will be evaluated on the quality of your predictions on the test set\n",
    "\n",
    "bs = 64\n",
    "n_epochs = 6\n",
    "\n",
    "Y_train_categorical = np_utils.to_categorical(labels_train,5)\n",
    "Y_dev_categorical = np_utils.to_categorical(labels_dev,5)\n",
    "history = model.fit(X_train_PAD, Y_train_categorical, batch_size=bs, epochs=n_epochs, validation_data=(X_dev_PAD, Y_dev_categorical))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x147e50e10>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 7 - Generate your predictions on the test set using model.predict(x_test)\n",
    "#     https://keras.io/models/model/\n",
    "#     Log your predictions in a file (one line = one integer: 0,1,2,3,4)\n",
    "#     Attach the output file \"logreg_lstm_y_test_sst.txt\" to your deliverable.\n",
    "\n",
    "# TYPE CODE HERE\n",
    "\n",
    "plt.subplot(3, 1, 1)\n",
    "plt.plot(history.history['acc'])\n",
    "plt.plot(history.history['val_acc'])\n",
    "plt.title(\"Model accuracy\")\n",
    "plt.xlabel(\"epochs\")\n",
    "plt.ylabel(\"accuracy\")\n",
    "plt.legend([\"train\",\"dev\"],loc ='upper left')\n",
    "\n",
    "plt.subplot(3, 1, 3)\n",
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.title(\"Loss function\")\n",
    "plt.xlabel(\"epochs\")\n",
    "plt.ylabel(\"Loss\")\n",
    "plt.legend([\"train\",\"dev\"], loc ='upper left')\n",
    "\n",
    "plt.show()\n",
    "\n",
    "predictions = model.predict(X_test_PAD)\n",
    "\n",
    "file = open(\"LSTM_predictions.txt\",\"w+\")\n",
    "for line in predictions:\n",
    "    file.write(str(np.argmax(line))+\"\\n\")  \n",
    "    \n",
    "file.close()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
